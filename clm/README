CLM -- A Language Binding for Common Lisp and OSF/Motif

Authors: Thomas Berlage (berlage@gmd.de)
         Andreas Baecker (baecker@gmd.de)


CLM is a language binding for Common Lisp and OSF/Motif.  It provides access to
the functionality of the X Toolkit Intrinsics and the Motif convenience
functions for Common Lisp.  Client programs can use the OSF/Motif widget classes
for their graphical user interface.  Additionally, client programs can use the
CLX graphics functions to draw into Motif widgets, especially into widgets of
classes XmDrawingArea and XmDrawnButton.  This functionality is only available
when the CLX package was loaded before compiling CLM. 

CLM consists of three components: A CLM daemon, a CLM server, and a package
of Common Lisp functions.  Both the CLM daemon and server are implemented in
``C''.  The CLM daemon runs on an arbitrary machine in the network and listens
for Lisp processes requesting to use CLM.  The CLM daemon forks CLM server
processes which communicate with their Lisp processes over a network-transparent
TCP/IP connection.  The CLM server offers the X toolkit and the Motif
functionality as remote procedure calls.  The package of Common Lisp functions
provides a high-level interface to these remote procedures. 

From the X server's point of view, the CLM server is an ordinary X client. 
The CLM server's functionality is to operate as a gateway between Motif and
Common Lisp.  The CLM functions send commands to the CLM server to create and
modify widgets.  The CLM server sends callbacks to the CLM application as a
reaction to user actions suchs as moving a scrollbar's slider or pressing a
push-button. 

A CLM application is a single (lightweight) process which runs inside a Lisp
process and uses CLM.  There may be an arbitrary number of concurrent CLM
applications in a single Lisp process.  The CLM daemon forks a CLM server
process for each CLM application.  This architecture protects concurrent
processes from getting in trouble with the non-reentrant Motif code.  The
multiprocessing facility is an extension to Common Lisp and may not be
available in all Lisp systems.  In this case, it is only possible to run one
CLM application per Lisp process. 

Lisp processes must not necessarily run on the same host as the CLM daemon. 
This allows CLM applications to run on hardware which is not capable of running
X and Motif.  CLM automatically chooses the right communication media for local
and remote Lisp processes. Where supported, the CLM server may also be
directly forked from the Lisp process without needing a daemon.

The CLM server solution is very efficient and results in good performance at
the user interface level.  Redraw operations and geometry management operations
are performed by the X Toolkit Intrinsics and the Motif widgets and are handled
locally in the CLM server.  User interaction like browsing through menu items
is also handled by the Motif widgets and requires only the execution of C code. 
Interactions like clicking a push-button lead to the execution of callbacks and
cause an interaction with Lisp.  Communication time is typically small and
doesn't cause any substantial delays. 
